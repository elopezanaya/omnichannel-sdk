name: Release CI

on:
  push:
    branches:
      - main
      - '**'  # Allow any branch
    tags:
      - 'v*'
  workflow_dispatch:  # Enable manual triggering
    inputs:
      dry_run:
        description: 'Run in dry-run mode (test without publishing)'
        required: false
        default: 'true'
        type: boolean
env:
  CACHE_CONTROL_HEADER: public, max-age=86400, s-maxage=259200, must-revalidate
  PUBLISH_TO_CDN : false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install az
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az

      - name: Checking out for ${{ github.ref }}
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.X

      - name: Update package version
        run: npx version-from-git --no-git-tag-version
        if: ${{ startsWith(github.ref, 'refs/heads/') }}

      - name: Read package.json
        id: read-package-json
        run: |
          echo "::set-output name=name::$(cat package.json | jq -r '.name')"
          echo "::set-output name=version::$(cat package.json | jq -r '.version')"

      - name: Install packages
        run: npm install

      - name: Build CDN & NPM packages
        run: |
          npm run build:dev
          npm run build:prod

      - name: Prepare CDN packages
        run: |
          mkdir ${{ steps.read-package-json.outputs.version }}
          cp dist/SDK.js ${{ steps.read-package-json.outputs.version }}
          cp dist/SDK.min.js ${{ steps.read-package-json.outputs.version }}

      - name: Publish CDN package to versioned blob (dev)
        if: ${{ env.PUBLISH_TO_CDN == 'true' }}
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGDEV }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "prerelease/${{ steps.read-package-json.outputs.version }}" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"

      - name: Publish CDN package to latest blob (dev)
        if: ${{ env.PUBLISH_TO_CDN == 'true' }}
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGDEV }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "prerelease/latest" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"

      - name: Publish CDN package to versioned blob (prod)
        if: ${{ env.PUBLISH_TO_CDN == 'true' }}
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGPROD }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "release/${{ steps.read-package-json.outputs.version }}" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"

      - name: Publish CDN package to latest blob (prod)
        if: ${{ env.PUBLISH_TO_CDN == 'true' }}
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGPROD }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "release/latest" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"

      - name: Npm packaging
        run: npm pack

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: npm-tarball
          path: '*.tgz'

  publish:
    needs: build
    runs-on: ubuntu-latest
    # Always run the publish job for testing purposes
    if: ${{ always() && needs.build.result == 'success' }}

    steps:
      - uses: actions/download-artifact@v4.1.8
        with:
          name: npm-tarball

      - name: Read package.json
        id: read-package-json
        run: |
          echo "::set-output name=name::$(tar xOf *.tgz package/package.json | jq -r '.name')"
          echo "::set-output name=version::$(tar xOf *.tgz package/package.json | jq -r '.version')"
          echo "::set-output name=tarball::$(ls *.tgz)"
          echo "::set-output name=date::$(date +%Y-%m-%d)"

      - name: Run npm publish ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }}
        run: |
          # Determine if this is a dry run
          DRY_RUN_FLAG=""
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]] || [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref }}" != refs/tags/* ]]; then
            DRY_RUN_FLAG="--dry-run"
            echo "🧪 Running in DRY-RUN mode - no actual publishing will occur"
          else
            echo "🚀 Running in LIVE mode - will actually publish to npm"
          fi
          
          # Set up npm authentication with explicit registry URL encoding fix
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          
          # Disable npm updates and notifications
          npm config set fund false
          npm config set audit false
          npm config set progress false
          npm config set update-notifier false
          npm config set save false
          npm config set save-exact true
          npm config set package-lock false
          
          # Debug information
          echo "📦 Package name: ${{ steps.read-package-json.outputs.name }}"
          echo "🏷️  Package version: ${{ steps.read-package-json.outputs.version }}"
          echo "🔧 NPM version: $(npm --version)"
          echo "🔧 Node version: $(node --version)"
          echo "🌿 Git ref: ${{ github.ref }}"
          echo "🏃 Dry run input: ${{ github.event.inputs.dry_run }}"
          
          # Show npm whoami to verify auth
          echo "🔐 NPM authentication:"
          npm whoami || echo "❌ Not authenticated or token invalid"
          
          # Check if package exists on npm
          echo "🔍 Checking if package exists on npm:"
          npm view "@microsoft/ocsdk" version || echo "Package does not exist on npm registry"
          
          # Show tarball contents
          echo "📋 Tarball contents:"
          tar -tzf *.tgz | head -10
          
          # Show package.json from tarball
          echo "📄 Package.json from tarball:"
          tar -xOf *.tgz package/package.json | jq '.'
          
          # Alternative approach: Use npm pack from source instead of tarball
          echo "🚀 Publishing from source directory..."
          tar -xzf *.tgz
          
          # Try multiple approaches to avoid URL encoding
          if [[ -n "$DRY_RUN_FLAG" ]]; then
            echo "🧪 Attempting dry-run publish with different methods..."
            
            # Method 1: Direct tarball publish with explicit name
            echo "📦 Method 1: Direct tarball publish"
            npm publish *.tgz --registry https://registry.npmjs.org/ --tag master --access public --verbose $DRY_RUN_FLAG || echo "Method 1 failed"
            
            # Method 2: From extracted directory
            echo "📦 Method 2: From extracted directory"
            cd package
            npm publish --registry https://registry.npmjs.org/ --tag master --access public --verbose $DRY_RUN_FLAG || echo "Method 2 failed"
            cd ..
            
            # Method 3: Force name in publish command
            echo "📦 Method 3: With explicit package name"
            cd package
            PACKAGE_NAME=$(jq -r '.name' package.json)
            echo "Using package name: $PACKAGE_NAME"
            npm publish --registry https://registry.npmjs.org/ --tag master --access public --verbose $DRY_RUN_FLAG || echo "Method 3 failed"
            cd ..
            
          else
            # For actual publishing, use the most reliable method
            echo "🚀 Live publishing - using directory method"
            cd package
            
            # Show final package.json to confirm name
            echo "📄 Final package.json:"
            cat package.json | jq '.name, .version'
            
            npm publish --registry https://registry.npmjs.org/ --tag master --access public --verbose $DRY_RUN_FLAG
            cd ..
          fi
          
          # Only add dist-tag if not dry run
          if [[ -z "$DRY_RUN_FLAG" ]]; then
            npm dist-tag add "${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }}" latest
            echo "✅ Published and tagged successfully!"
          else
            echo "✅ Dry run completed successfully!"
          fi
          
          echo ""
          echo "🔍 Troubleshooting notes:"
          echo "• If you see @microsoft%2focsdk in URLs, that's a known npm bug with scoped packages"
          echo "• If you get EOTP error, the token needs automation scope or 2FA must be disabled"
          echo "• If you get 404 error, the package may not exist or URL encoding is breaking the request"
          echo "• Use 'npm token create --cidr=0.0.0.0/0' for automation tokens"
          echo "• Check if the @microsoft scope exists and you have publish permissions"        
